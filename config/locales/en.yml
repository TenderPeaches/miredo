en:
  keywords:
    ok: "OK"
    cancel: "Cancel"
    save: "Save"
    delete: "Delete"
    another: "Another"
    apply: "Apply"
    sort_by: "Sort by"
    favorites: "Favorites"
    filter: "Filter"
    new: "New"
    create: "Create"
    edit: "Edit"
    update: "Update"
    copy: "Copy"
    send: "Send"
    example: "Example"
  actions:
    new: "New %{thing}"
    add: "Add %{thing}"
    remove: "Remove %{thing}"
    edit: "Edit %{thing}"
    update: "Update %{thing}"
    create: "Create %{thing}"
    delete: "Delete %{thing}"
    select: "Select %{thing}"
    show: "Show %{thing}"
    copy: "Copy %{thing}"
  confirm: 
    delete: "Are you sure you wish to delete %{model}?"
  alerts:
    invalid_form: "Error: invalid %{model} form. Please check the following: %{errors}"
  flashes:
    song_played: "You just practiced playing \"%{song}\" for the %{play_count} time!"
    song_played_by_heart: "You just practiced playing \"%{song}\" by heart, for the %{play_count} time!"
    song_added: "\"%{song}\" has been created and added to the database."
    song_added_thanks: "Thank you for contributing to Miredo's public songbook!"
    song_added_privacy: "Flag the song as public if you want everyone to be able to play along."
  cta:
    log_in: "Log in"
    log_out: "Log out"
    sign_up: "Sign up"
    contact_us: "Contact us"
    define_progression_templates: "Edit Progression Templates"
    edit_song_structure: "Edit Song Structure"
    browse_songs: "Browse songs"
    edit_song: "Edit Song Info"
    view_song: "View Song"
    new_song: "New Song"
    practice_random: "Random Practice"
  hints:
    browse_songs: "View all available song tablatures"
    new_song: "Create and save a tablature for a song that isn't currently listed"
    practice_random: "Go to a random song page"
    sign_up: "Submit your own songs or covers and track your practice habits"
    log_in: "Already a member?"
    play_song: "I practiced this song"
    play_song_by_heart: "I practiced this song by heart"
    user_song_plays: "How many times you played this song"
    user_last_practice: "Last time you practiced this song"
    song_is_public: "Anyone can see public songs, whereas private songs can only be viewed by whomever is responsible for them"
    instrument_view: "Pick your instrument!"
    chord_composition: "See which notes make up each type of chord"
    key_scale: "Find out how to tell a song's key and scale"
    progression_templates: "Conventions and tips for creating song progression templates"
    progressions: "Conventions and tips for implementing the progression templates into a proper song"
  controls:
    next: "Next"
    previous: "Previous"
    random: "Random"
    play: "✓"
    play_by_heart: "♥︎"
    edit: "✎"
  notices:
    early_access:
      title: "Early access"
      blurb_warning: "Miredo is an individual-scale project which only launched recently. As such, many features might behave unexpectedly or outright not work under certain circumstances."
      blurb_reach_out_prompt: "Please reach out"
      blurb_reach_out_text: "to describe any issues and I'll do my best to fix them in a hopefully somewhat timely fashion."
      blurb_suggestions: "Likewise, suggestions for new features are welcome but the current priority is to fine-tune the existing ones."
    funding: 
      title: "Help Miredo stay afloat!"
      blurb: "As of now Miredo has no ads or premium features so it is solely funded through investments from its developers and voluntary donations from its users. Please give according to your usage and means. If you're a professional, check if your donation can be tax-deductible in your jurisdiction, as this could be used for musical or educational purposes."
  instructions:
    song_play: "Press the Play (✓) button after having practiced a song with the help of a tablature or any sort of aid that wouldn't be available during a live performance"
    song_play_by_heart: "Press the Play by Heart (♥︎) button after having practiced a song by heart, without going to a tablature for the chords, lyrics or other helpers at any given time"
    edit_song: "Change a song's meta-attributes, like its title, default key, suggested capo, etc."
    define_progressions: "Define the building blocks for the song, known as \"Progression Templates\""
    edit_song_structure: "Once the progression templates have been defined, piece them together and add lyrics in order to produce the tablature"
    new_progression_template: "Create new progression templates to use as building blocks for songs"
    progression_template_tag: "Assign a label (tag) to the template. Try to follow the usual naming conventions, with names like Intro, Chorus, Verse, Bridge, etc. Use letters to distinguish between different progressions that occupy the same position, like Verse A and Verse B. Use `pt` to distinguish between parts, like Verse pt1."
    progression_template_reps: "How many times the chords in this template repeat themselves, by default. Individual implementations of this template can have their own measure of reps, and the total product of these two values indicate the total number of times that the chord pattern must ultimately be repeated for a given sequence."
    sequencer: "Change the order of the progressions by moving each progression individually through the arrow buttons. The double arrows move a progression to the first or the last sequence of the song, respectively."
    progression_tag: "This is the final label associated with this progression, meaning the one that will appear in the songbook. Try using the same vocabulary as for progression templates, but favor using numbers to identify each sequence. For instance, verses would be tagged \"Verse 1\", \"Verse 2\", etc. Use the same tags for multiple consecutive progressions that thematically belong to the same part of the song."
    progression_lyrics: "Enter the lyrics for the given progression. Use semi-columns or line breaks (return key) to define each line."
    progression_reps: "How many times the template is repeated throughout this sequence. For instance, if the progression template has a reps value of 2, and a progression that uses that template has a reps value of 3, the template must be repeated 6 times overall before the next progression is to be played."
    progression_key: "If the progression key differs from the general key of the song (or of the progression template being implemented), specify it here."
    progression_scale: "If the progression scale differs from the general scale of the song (or of the progression template being implemented), specify it here."
    copy_progression: "Create a new progression identical to this one."
    modify_progression: "Make sure you confirm your changes by clicking \"Update Progression\""
  music_theory:
    semitone: "Semitone"
    semitones_from_root: "Semitones from the root"
    tone: "Tone"
  song_structure:
    intro: "Intro"
    intro_definition: "Progression which begins the song, usually but not always instrumental."
    verse: "Verse"
    verse_definition: "Progression which tends to repeat itself musically, but not necessarily lyrically. Verses tend not to contain the song's hooks and tend to be a bit longer than other parts of the song."
    pre_chorus: "Pre-Chorus"
    pre_chorus_definition: "Transitional progression that preceeds the chorus, typically bridging the gap between it and the previous verse."
    chorus: "Chorus"
    chorus_definition: "Progression most likely to contain the song's title and/or main hook. Choruses will typically have the exact same musical and lyrical content from one to the next."
    post_chorus: "Post-Chorus"
    post_chorus_defintion: "Progression that immediately follows the chorus, whether it's transitional or in order to stretch out the chorus."
    bridge: "Bridge"
    bridge_definition: "A progression which connects two distinct parts of a song to one another. Often times, they are progressions that would be difficult to label otherwise, as they either don't repeat themselves or don't necessarily follow the rest of the song's pattern."
    solo: "Solo"
    solo_definition: "A bridge where a particular instrument is prominently featured."
    break: "Break/Interlude/Riff"
    break_definition: "Typically short instrumental progressions which don't feature any one instrument over the other, usually connecting two similar parts together. "
    ending: "Ending"
    ending_definition: "Progression which might be very similar to another but differs in the way that it ends, as it intends to finish the song."
    outro: "Outro"
    outro_definition: "Typically instrumental progression which tends to repeat itself, sometimes fading out, in order to finish the song."
    finale: "Finale"
    finale_definition: "A single chord used to finish the song. Typically, the chord played will indicate the song's key."
  content:
    landing:
    help: 
      page_title: "Help"
    references:
      page_title: "References"
      chord_composition: "Chord composition"
      key_scale: "Keys & Scales"
      progression_templates: "Progression templates"
      progressions: "Song structure"
      internal: "Internal references"
      external: "External links"
      website_music_theory: "Simple, clean website to learn Music Theory from scratch"
    chord_composition:
      reference: "Chord reference"
      chord_definition: "Combination of two or more notes played simultaneously"
      root: "Root"
      root_definition: "Single note from which a chord is built"
      triad: "Triad"
      triad_definition: "A chord consisting of three notes played simultaneously"
      intervals: "There are different kinds of chords, depending on the intervals between each of the notes that compose it. To better understand chords, you should understand these intervals first. You can learn by playing different intervals on your instrument to hear them out and/or reading about them: "
      notation: "In tablatures, chords will be identified by their root note (A-G) followed by the chord notation. If you see only the root note, you're looking at a major chord (or major triad)."
      intervals_table: "This table shows how each chord is built. The intervals are displayed alongside the number of semitones from the root for each interval that makes up each chord."
    key_scale:
      key_definition: "A key sets the starting point for a scale, thus defining the notes that make it up"
      scale_definition: "A sequence of notes defined by the intervals between each one"
      key_scale_relationship: "Usually, when talking about a \"scale\" or a \"key\", we're actually referring to both of them at once. The key establishes the root note for the scale and the other notes can be inferred by the intervals that define the scales themselves. For instance, when a song is in \"C major\", it means the song notes follow the major scale in the key of C."
      scale_example: "The C Major scale is the most popular starting point for scales as it is the only major scale without any sharp or flat notes. Using the intervals chart, start with C and climb however many semitones is indicated on the chart. On a piano, you will end up playing only the white keys. Remember that not all notes have 2 semitones between them: C + 2 => D, + 2 => E, + 1 => F, + 2 => G, + 2 => A, + 2 => B, + 1 => C"
      finding_out_key_heading: "How to find a song's key and scale?"
      finding_out_key: "Songs typically end on their key, so the last chord of a song is usually a good hint as to what the key of the song is. Songs that don't end on their key tend to feel unresolved. You can also infer the key from the song's chords. At first, break down all the chords into their individual notes and try to find which combination of key and scale include all the notes you found. Watch out for dissonant notes, which land outside of a song's scale and will sound a bit quirky as a result."
    progression_templates:
      template_definition: "Building block for a song"
      progression_definition: "Implementation of a template, adjusted to fit the song's structure"
      tag_definition: "Identifying label for the progression template"
      rep_definition: "How many times a progression template repeats itself"
      template_hint: "Think of progression templates as blueprints and progressions as objects being made according to that blueprint. When creating a tablature with Miredo, you must first identify the different song progressions and reduce their simplest expressions through progression templates. Once the templates are created, you can invoke them in whatever order the song calls for and add in the lyrics to complete the transcription."
      tag_conventions: "Template tags can be assigned arbitrarily, as long as you're able to tell your templates apart in order to build the song. However, for consistency's sake, we encourage you to adhere to certain conventions when naming templates:"
      tag_conventions_structure: "Use traditional musical structure terms to describe a template's role. For instance:"
      tag_conventions_variance: "Sometimes, the same song part might have a slightly different progression, for instance a song's first and last verse might have a different ending. In such cases, use letters differentiate them, as in: \"Verse A\" and \"Verse B\"."
      tag_conventions_continuity: "It's possible that, due to how patterns repeat themselves or simply to allow working with smaller templates, a single song part such as the Chorus needs to be broken down into multiple templates. In such cases, append the \"pt\" abbreviation to the tag, followed by the sequence number. For instance, two templates making up the chorus would have the tags \"Chorus pt1\" and \"Chorus pt2\"."
      rep_hint: "For reps (or repetitions), consider that it is also possible to set a number of reps when building the song strucutre. Thus, in order to minimize the number of templates you create, try to set the template reps to the smallest number that can be multiplied to reach the final number of times that that progression will be played throughout the song."
      rep_example: "For instance, if some song has a progression 'C-F-Am-G' that is played sometimes twice in a row and other times 4 times in a row, then you should create a template 'C-F-Am-G' with a reps value of 2. When you set the song's structure, you can invoke that template with a reps value of 1 or 2 in order to get the desired result of 2 or 4 repetitions."
      keyscale_hint: "If a certain progression's key always differs from the song's key, then the progression's template should have its key set. Anytime that template will be called, it will be understood that it's of a different key. If the key changes throughout the song, leave the template key field blank and adjust the key individually for each implementation."
      cypher_hint: "In order to recognize the chords you are assigning to the template, Miredo must receive them in a very specific format that is fortunately kept as simple as possible - a cypher. Simply write down each chord with the standard english notation (C, D, E, etc.) immediately followed by the chord's notation, as listed in the %{chords_reference}. A chord being written down is equivalent to the chord being played for 1 beat. Add one dash for each additional beat. It doesn't need to be an exact match, as long as anyone can easily figure out the relative duration of each chord to one another."
      cypher: "Cypher"
    progressions: 
      introduction: "The final step is to put it all together by creating progressions out of templates, sprinkling in the lyrics and adjusting each progression as necessary. Make sure you click the button to create each progression, as they are not saved until then."
      tag_hint: "Unlike template tags, the purpose of progression tags is to identify the actual part of the song being defined. Thus, for progression tags, you should generally follow the same convention as for template tags regarding the use of generic song structure names like \"Verse\" and \"Chorus\", except here you will be using numbers to identify each part, whenever there is more than one. For instance, \"Verse 1\" if there are multiple verses and \"Bridge\" if there is only one bridge."
      tag_continuity: "Progression tags don't need to be unique within a song. Instead, if multiple progressions in a row have the same tag, Miredo will effectively consider them as part of the same song structure. For instance, 3 progressions in a row with the tag \"Chorus 1\" will be considered a single part of the song: the first chorus."
      lyrics_hint: "Use semi-columns or new lines for line breaks. Try to use around 10-12 words per line, as shorter lines result in less efficient use of space. If there are back vocals, surround them with parentheses (like so). If a line repeats itself multiple times, you can write it once and follow it with a multiplication indicator surrounded by parentheses, like so: (x3)."
      reps_hint: "Progressions have their own multiplier, which is applied to the template's multiplier. For instance, a template with 2 reps being implemented with its own 2 reps means the chord progression is ultimately to be played 4 times."
      keyscale: "The ultimate decider of a progression's key is the progression's own key value. If left empty, the progression will take the template's key and if that one's empty too, it will take the song's key. Most songs remain in the same key throughout, so it's normal to ignore the key and scale fields most of the time."
      sequencer: "Once the progressions have been created, they appear in the sequencer which lets you move them around. Use the double arrows to move a progression to the start/end of the list and the single arrows to move them once over. It's not great but it works for now!"
      modifications: "When you modify a progression, make sure to confirm your changes otherwise they will not be saved. "
      sequencing: "Sequencing"
    settings:
      page_title: "Settings"
      default_instrument: "Default instrument"
      user_instruments: "Set Instruments"
      hot: "🔥"
      hot_plays_threshold: "For a song to be flagged 🔥, you must have practiced it %{threshold} times over the last %{timelapse} days"
      old_heart: "Old ♥︎s"
      old_heart_threshold: "If your last practice of a song was done by heart over %{threshold} days ago, it will be flagged as an Old ♥︎"
      update_notice: "Settings successfully updated"
    inquiries:
      return_address: "Your email address"
      subject: "Subject"
      body: "Content"
    songs:
      no_progression_template: "No progression templates have been defined for this song"
      no_progression: "No song progressions have been defined for this song"
      filters: "Click on a filter to toggle it"
      key: "Originally in %{key}"
      suggested_capo: "Suggested capo: %{capo}th fret"
      no_capo: "No capo"
      negative_capo: "Tune down %{capo} half-steps"
      nb_practice_user: "You practiced this %{times} times"
      nb_practice_all: "This song has been practiced %{times} times"
      submitter: "The tablature was submitted by %{user}"
      last_played: "Last played %{time} %{unit} ago"
      scale_degrees: "Scale degrees"
      chords: "Chords used"
      favorite: "Favorite?"
      capo: "Capo"
      new_artist: "If artist is not in the list, enter their name here"
      forgotten: "Forgotten"
      hot: "Hot"
      old_heart: "Test of time"
  activerecord:
    models:
      admin: "Admin"
      album_contribution: "Album contribution"
      album: "Album"
      artist: "Artist"
      chord_component: "Chord component"
      chord: "Chord"
      instrument: "Instrument"
      interval_quality: "Interval quality"
      interval: "Interval"
      key: "Key"
      pitch_class: "Pitch class"
      pitch_standard: "Pitch standard"
      pitch: "Pitch"
      progression_chord: "Progression chord"
      progression_template: "Progression template"
      progression: "Progression"
      scale_interval: "Scale interval"
      scale: "Scale"
      song_contribution: "Artist contribution"
      song_play: "Repetition"
      song: "Song"
      time_signature: "Time signature"
      tuning_pitch: "Tuning pitch"
      tuning: "Tuning"
      user_favorite: "Favorite"
      user_intrument: "Instrument"
      user_setting: "Setting"
      user: "User"
    attributes:
      chords: 
        name: "Chord Type"
        notation: "Notation"
      song:
        name: "Song name"
        number: "#"
        duration: "Duration (s or m:s)"
        capo: "Suggested capo"
        last_practiced: "Your last practice"
        nb_practices: "Your practice count" 
        bpm: "Beats per minute (bpm)"
        is_public: "Make public?"
        time_signature: "Time signature"
        key: "Default key"
        scale: "Scale"
        album: "Initial release Album"
        submitter: "Submitting user"
        artist: "Artist whose rendition of the song the tab was based on"
      progression_template:
        tag: "Template tag"
        reps: "Template reps"
      progression:
        tag: "Progression tag"
        lyrics: "Lyrics"
        reps: "Progression reps"
        template_tag: "Template tag"